{"version":3,"sources":["../src/requireCssModule.js"],"names":["getTokens","runner","cssSourceFilePath","filetypes","extension","substr","lastIndexOf","syntax","options","from","require","lazyResult","process","warnings","forEach","message","console","warn","text","root","tokens","scopedName","generateScopedName","context","cwd","fetch","to","inSearchPaths","searchPaths","some","prefix","startsWith","toPath","plugins","paths"],"mappings":";;;;;;AAEA;;AAIA;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAKA,MAAMA,YAAY,CAACC,MAAD,EAASC,iBAAT,EAAoCC,SAApC,KAAsE;AACtF,QAAMC,YAAYF,kBAAkBG,MAAlB,CAAyBH,kBAAkBI,WAAlB,CAA8B,GAA9B,CAAzB,CAAlB;AACA,QAAMC,SAASJ,UAAUC,SAAV,CAAf;;AAEA,QAAMI,UAAkB;AACtBC,UAAMP;AADgB,GAAxB;;AAIA,MAAIK,MAAJ,EAAY;AACV;AACAC,YAAQD,MAAR,GAAiBG,QAAQH,MAAR,CAAjB;AACD;;AAED,QAAMI,aAAaV,OAChBW,OADgB,CACR,sBAAaV,iBAAb,EAAgC,OAAhC,CADQ,EACkCM,OADlC,CAAnB;;AAGAG,aACGE,QADH,GAEGC,OAFH,CAEYC,OAAD,IAAa;AACpB;AACAC,YAAQC,IAAR,CAAaF,QAAQG,IAArB;AACD,GALH;;AAOA,SAAOP,WAAWQ,IAAX,CAAgBC,MAAvB;AACD,CAxBD;;kBAiCe,CAAClB,iBAAD,EAA4BM,OAA5B,KAAyE;AACtF;AACA,MAAIP,MAAJ;;AAEA,QAAMoB,aAAa,4BAAab,QAAQc,kBAAR,IAA8B,4CAA3C,EAAyF;AAC1GC,aAASf,QAAQe,OAAR,IAAmBX,QAAQY,GAAR;AAD8E,GAAzF,CAAnB;;AAIA,QAAMC,QAAQ,CAACC,EAAD,EAAajB,IAAb,KAA8B;AAC1C,UAAMkB,gBAAgBnB,QAAQoB,WAAR,IAAuBpB,QAAQoB,WAAR,CAAoBC,IAApB,CAA0BC,MAAD,IAAY;AAChF,aAAOJ,GAAGK,UAAH,CAAcD,MAAd,CAAP;AACD,KAF4C,CAA7C;AAGA,UAAME,SAASL,gBAAgBD,EAAhB,GAAqB,mBAAQ,mBAAQjB,IAAR,CAAR,EAAuBiB,EAAvB,CAApC;;AAEA,WAAO1B,UAAUC,MAAV,EAAkB+B,MAAlB,EAA0BxB,QAAQL,SAAlC,CAAP;AACD,GAPD;;AASA,QAAM8B,UAAU,kGAId,wCAAgB;AACdC,WAAO1B,QAAQoB;AADD,GAAhB,CAJc,0CAQd,kCAAU;AACRN,wBAAoBD;AADZ,GAAV,CARc,EAWd,mCAAW;AACTI;AADS,GAAX,CAXc,CAAhB;;AAgBAxB,WAAS,uBAAQgC,OAAR,CAAT;;AAEA,SAAOjC,UAAUC,MAAV,EAAkBC,iBAAlB,EAAqCM,QAAQL,SAA7C,CAAP;AACD,C","file":"requireCssModule.js","sourcesContent":["// @flow\n\nimport {\n  dirname,\n  resolve\n} from 'path';\nimport {\n  readFileSync\n} from 'fs';\nimport postcss from 'postcss';\nimport genericNames from 'generic-names';\nimport ExtractImports from 'postcss-modules-extract-imports';\nimport LocalByDefault from 'postcss-modules-local-by-default';\nimport Parser from 'postcss-modules-parser';\nimport Scope from 'postcss-modules-scope';\nimport Values from 'postcss-modules-values';\nimport Nested from 'postcss-nested';\nimport ResolvePath from 'postcss-modules-resolve-path';\nimport type {\n  StyleModuleMapType\n} from './types';\n\nconst getTokens = (runner, cssSourceFilePath: string, filetypes): StyleModuleMapType => {\n  const extension = cssSourceFilePath.substr(cssSourceFilePath.lastIndexOf('.'));\n  const syntax = filetypes[extension];\n\n  const options: Object = {\n    from: cssSourceFilePath\n  };\n\n  if (syntax) {\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    options.syntax = require(syntax);\n  }\n\n  const lazyResult = runner\n    .process(readFileSync(cssSourceFilePath, 'utf-8'), options);\n\n  lazyResult\n    .warnings()\n    .forEach((message) => {\n      // eslint-disable-next-line no-console\n      console.warn(message.text);\n    });\n\n  return lazyResult.root.tokens;\n};\n\ntype OptionsType = {|\n  filetypes: Object,\n  generateScopedName?: string,\n  context?: string,\n  searchPaths?: Array<string>\n|};\n\nexport default (cssSourceFilePath: string, options: OptionsType): StyleModuleMapType => {\n  // eslint-disable-next-line prefer-const\n  let runner;\n\n  const scopedName = genericNames(options.generateScopedName || '[path]___[name]__[local]___[hash:base64:5]', {\n    context: options.context || process.cwd()\n  });\n\n  const fetch = (to: string, from: string) => {\n    const inSearchPaths = options.searchPaths && options.searchPaths.some((prefix) => {\n      return to.startsWith(prefix);\n    });\n    const toPath = inSearchPaths ? to : resolve(dirname(from), to);\n\n    return getTokens(runner, toPath, options.filetypes);\n  };\n\n  const plugins = [\n    Nested,\n    Values,\n    LocalByDefault,\n    new ResolvePath({\n      paths: options.searchPaths\n    }),\n    ExtractImports,\n    new Scope({\n      generateScopedName: scopedName\n    }),\n    new Parser({\n      fetch\n    })\n  ];\n\n  runner = postcss(plugins);\n\n  return getTokens(runner, cssSourceFilePath, options.filetypes);\n};\n"]}